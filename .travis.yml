language: go
go: 1.14.x

jobs:
  include:
    - name: linux-amd64
      os: linux
      dist: xenial
      env: CGO_ENABLED=1 GOOS=linux GOARCH=amd64
      install:
        - sudo apt-get install build-essential
        - sudo apt-get install libtool
        - sudo apt-get install autopoint
    - name: darwin-amd64
      os: osx
      env: CGO_ENABLED=1 GOOS=darwin GOARCH=amd64
      install:
        - brew install libtool
        - brew install gettext
    - name: windows-amd64
      os: windows
      env: CGO_ENABLED=1 GOOS=windows GOARCH=amd64
      before_script:
        - $mingw64
        - go run build.go -verbose build-all
      before_install:
      - |-
         case $TRAVIS_OS_NAME in
           windows)
             [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
             choco uninstall -y mingw
             choco upgrade --no-progress -y msys2
             export msys2='cmd //C RefreshEnv.cmd '
             export msys2+='& set MSYS=winsymlinks:nativestrict '
             export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
             export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
             export msys2+=" -msys2 -c "\"\$@"\" --"
             $msys2 pacman --sync --noconfirm --needed mingw-w64-x86_64-toolchain
             ## Install more MSYS2 packages from https://packages.msys2.org/base here
             taskkill //IM gpg-agent.exe //F  # https://travis-ci.community/t/4967
             export PATH=/C/tools/msys64/mingw64/bin:$PATH
             export MAKE=mingw32-make  # so that Autotools can find it
             ;;
         esac
      before_cache:
      - |-
          case $TRAVIS_OS_NAME in
            windows)
              # https://unix.stackexchange.com/a/137322/107554
              $msys2 pacman --sync --clean --noconfirm
              ;;
          esac
      cache:
          directories:
          - $HOME/AppData/Local/Temp/chocolatey
          - /C/tools/msys64
    allow_failures:
      - env: GOOS=windows

before_script:
  - go run build.go -verbose build-all

script:
  - go get -u github.com/cretz/bine/tor
    #- go test -v build_test.go -tor.verbose

after_script:
  - go run build.go package-libs

after_success:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then mv libs.tar.gz tor-static-linux-amd64.tar.gz; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then mv libs.tar.gz tor-static-darwin-amd64.tar.gz; fi

deploy:
  provider: releases
  token: $GITHUB_PAT
  file:
    - tor-static-linux-amd64.tar.gz
    - tor-static-darwin-amd64.tar.gz
  draft: true
  on:
    repo: cretz/tor-static
    tags: true
